{
	"info": {
		"_postman_id": "abcc2fb3-418d-4093-8c65-7273892f85b6",
		"name": "Automation Exercise.com_API automatinis testavimas Agn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41095196"
	},
	"item": [
		{
			"name": "Products List",
			"item": [
				{
					"name": "Get All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// respData-kintamasis | json paverčiu į javascript objektą\r",
									"const respData = pm.response.json();\r",
									"\r",
									"// Agnė -> tikrinu ar id nesikartoja\r",
									"pm.test(\"Product IDs are unique\", function () {\r",
									"    const products = respData.products;\r",
									"    pm.expect(products).to.be.an(\"array\");\r",
									"    const ids = products.map(function(product) {\r",
									"        return product.id;\r",
									"    });\r",
									"    const uniqueIds = new Set(ids);\r",
									"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
									"});\r",
									"\r",
									"// tikrinu žalią 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"// tikrinu json įrašytą responseCode\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode'); \r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test('Products are not empty', () => {\r",
									"    pm.expect(respData.products).to.be.an('array').that.is.not.empty;\r",
									"    respData.products.forEach((product) => {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('name');\r",
									"        pm.expect(product).to.have.property('price');\r",
									"        pm.expect(product).to.have.property('brand');\r",
									"        pm.expect(product).to.have.property('category');\r",
									"        pm.expect(product.category).to.have.property('usertype');\r",
									"        pm.expect(product.category).to.have.property('category');\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Products in list have correct types of properties values\", () => {\r",
									"    respData.products.forEach((product) => {  \r",
									"        pm.expect(product.id).to.be.a('number');\r",
									"        pm.expect(product.name).to.be.a('string');\r",
									"        pm.expect(product.price).to.be.a('string');\r",
									"        pm.expect(product.brand).to.be.a('string');\r",
									"        pm.expect(product.category).to.be.a('object');\r",
									"        pm.expect(product.category.usertype).to.be.a('object');\r",
									"        pm.expect(product.category.usertype.usertype).to.be.a('string');\r",
									"        pm.expect(product.category.category).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}productsList",
							"host": [
								"{{base_url}}productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 405\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}productsList",
							"host": [
								"{{base_url}}productsList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Brands List",
			"item": [
				{
					"name": "Get All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test('Products are not empty', () => {\r",
									"    pm.expect(respData.brands).to.be.an('array').that.is.not.empty;\r",
									"    respData.brands.forEach((brand) => {\r",
									"        pm.expect(brand).to.have.property('id');\r",
									"        pm.expect(brand).to.have.property('brand');\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Product IDs are unique\", function () {\r",
									"    const brands = respData.brands;\r",
									"    pm.expect(brands).to.be.an(\"array\");\r",
									"    const ids = brands.map(function(brand) {\r",
									"        return brand.id;\r",
									"    });\r",
									"    const uniqueIds = new Set(ids);\r",
									"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Products in list have correct types of properties values\", () => {\r",
									"    respData.brands.forEach((brand) => {  \r",
									"        pm.expect(brand.id).to.be.a('number');\r",
									"        pm.expect(brand.brand).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}brandsList",
							"host": [
								"{{base_url}}brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put to All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 405\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}brandsList",
							"host": [
								"{{base_url}}brandsList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Product",
			"item": [
				{
					"name": "**papildyti Post to Search Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"\r",
									"// išsiaiškinti visus zodzius \r",
									"pm.test(\"A search term is mentioned in the product name or category\", () => {\r",
									"    respData.products.forEach((product) => {\r",
									"        const nameIncludesTop = product.name.toLowerCase().includes(pm.collectionVariables.get(\"search_product\"));\r",
									"        const categoryIncludesTop = product.category.category.toLowerCase().includes(pm.collectionVariables.get(\"search_product\"));\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test('Products are not empty', () => {\r",
									"    pm.expect(respData.products).to.be.an('array').that.is.not.empty;\r",
									"    respData.products.forEach((product) => {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('name');\r",
									"        pm.expect(product).to.have.property('price');\r",
									"        pm.expect(product).to.have.property('brand');\r",
									"        pm.expect(product).to.have.property('category');\r",
									"        pm.expect(product.category).to.have.property('usertype');\r",
									"        pm.expect(product.category).to.have.property('category');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Products in list have correct types of properties values\", () => {\r",
									"    respData.products.forEach((product) => {  \r",
									"        pm.expect(product.id).to.be.a('number');\r",
									"        pm.expect(product.name).to.be.a('string');\r",
									"        pm.expect(product.price).to.be.a('string');\r",
									"        pm.expect(product.brand).to.be.a('string');\r",
									"        pm.expect(product.category).to.be.a('object');\r",
									"        pm.expect(product.category.usertype).to.be.a('object');\r",
									"        pm.expect(product.category.usertype.usertype).to.be.a('string');\r",
									"        pm.expect(product.category.category).to.be.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "search_product",
									"value": "dress",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}searchProduct",
							"host": [
								"{{base_url}}searchProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "??? POST To Search Product without search_product parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test('Products are not empty', () => {\r",
									"    pm.expect(respData.products).to.be.an('array').that.is.not.empty;\r",
									"    respData.products.forEach((product) => {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('name');\r",
									"        pm.expect(product).to.have.property('price');\r",
									"        pm.expect(product).to.have.property('brand');\r",
									"        pm.expect(product).to.have.property('category');\r",
									"        pm.expect(product.category).to.have.property('usertype');\r",
									"        pm.expect(product.category).to.have.property('category');\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Products in list have correct types of properties values\", () => {\r",
									"    respData.products.forEach((product) => {  \r",
									"        pm.expect(product.id).to.be.a('number');\r",
									"        pm.expect(product.name).to.be.a('string');\r",
									"        pm.expect(product.price).to.be.a('string');\r",
									"        pm.expect(product.brand).to.be.a('string');\r",
									"        pm.expect(product.category).to.be.a('object');\r",
									"        pm.expect(product.category.usertype).to.be.a('object');\r",
									"        pm.expect(product.category.usertype.usertype).to.be.a('string');\r",
									"        pm.expect(product.category.category).to.be.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "top",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}searchProduct",
							"host": [
								"{{base_url}}searchProduct"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify Login",
			"item": [
				{
					"name": "POST To Verify Login with valid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john.smith2@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "passs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "??? ReikiaTikPassIrManNe405GaunasiPOST To Verify Login without email parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 405\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(405);\r",
									"});\r",
									"// 400 ar 405?\r",
									"\r",
									"// API URL: https://automationexercise.com/api/verifyLogin\r",
									"// Request Method: POST\r",
									"// Request Parameter: password\r",
									"// Response Code: 400\r",
									"// Response Message: Bad request, email or password parameter is missing in POST request.\r",
									"\r",
									"// paspaudus nuoroda:\r",
									"// {\"responseCode\": 405, \"message\": \"This request method is not supported.\"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "password",
									"value": "passs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							],
							"query": [
								{
									"key": "password",
									"value": "passs",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "??? cia kazkas turejo ivykt? error 405 DELETE To Verify Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 204\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john.smith2@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "passs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							],
							"query": [
								{
									"key": "email",
									"value": "john.smith2@gmail.com",
									"disabled": true
								},
								{
									"key": "password",
									"value": "passs",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify Login with invalid details",
			"item": [
				{
					"name": "POST To Create/Register User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 201\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "JohnSmithy",
									"type": "text"
								},
								{
									"key": "email",
									"value": "john.smithy@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "28",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "02",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1982",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Smith",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Arijus",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Haugetuft",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "1",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "269875",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Illinois",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Chicago",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+025897456315",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}createAccount",
							"host": [
								"{{base_url}}createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST To Verify Login with invalid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john.smithy@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}verifyLogin",
							"host": [
								"{{base_url}}verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE METHOD To Delete User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "john.smithy@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}deleteAccount",
							"host": [
								"{{base_url}}deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User Account",
			"item": [
				{
					"name": "POST To Create/Register User Account Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 201\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Smith",
									"type": "text"
								},
								{
									"key": "email",
									"value": "john.smith1@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "28",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "02",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1982",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Smith",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Arijus",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Haugetuft",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "1",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "269875",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Illinois",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Chicago",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+025897456315",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}createAccount",
							"host": [
								"{{base_url}}createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT METHOD To Update User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "AlisaSmith",
									"type": "text"
								},
								{
									"key": "email",
									"value": "alisa.smith@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mrs",
									"type": "text"
								},
								{
									"key": "bith_day",
									"value": "15",
									"type": "text"
								},
								{
									"key": "bith_month",
									"value": "May",
									"type": "text"
								},
								{
									"key": "bith_year",
									"value": "1995",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Alisa",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Smith",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Haugetuft",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "18",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "254789",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Illinois",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Chicago",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+3259874563",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Arijus",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}updateAccount",
							"host": [
								"{{base_url}}updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE METHOD To Delete User Account Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "alisa.smith@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}deleteAccount",
							"host": [
								"{{base_url}}deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Account by Email",
			"item": [
				{
					"name": "POST To Create/Register User Account Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 201\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Layla Smith",
									"type": "text"
								},
								{
									"key": "email",
									"value": "layla.smith@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "28",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "02",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1982",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "John",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Smith",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Arijus",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Haugetuft",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "1",
									"type": "text"
								},
								{
									"key": "country",
									"value": "United States",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "269875",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Illinois",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Chicago",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+025897456315",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}createAccount",
							"host": [
								"{{base_url}}createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user account detail by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test('User exists and has properties', () => {\r",
									"    pm.expect(respData).to.have.property('user').and.to.not.be.empty;\r",
									"    let user = respData.user;\r",
									"    pm.expect(user).to.have.property('id');\r",
									"    pm.expect(user).to.have.property('name');\r",
									"    pm.expect(user).to.have.property('email');\r",
									"    pm.expect(user).to.have.property('title');\r",
									"    pm.expect(user).to.have.property('birth_day');\r",
									"    pm.expect(user).to.have.property('birth_month');\r",
									"    pm.expect(user).to.have.property('birth_year');\r",
									"    pm.expect(user).to.have.property('first_name');\r",
									"    pm.expect(user).to.have.property('last_name');\r",
									"    pm.expect(user).to.have.property('company');\r",
									"    pm.expect(user).to.have.property('address1');\r",
									"    pm.expect(user).to.have.property('address2');\r",
									"    pm.expect(user).to.have.property('country');\r",
									"    pm.expect(user).to.have.property('state');\r",
									"    pm.expect(user).to.have.property('city');\r",
									"    pm.expect(user).to.have.property('zipcode');\r",
									"});\r",
									"\r",
									"pm.test(\"User properties have correct types of values\", () => {\r",
									"    pm.expect(respData.user.id).to.be.a('number');\r",
									"    pm.expect(respData.user.name).to.be.a('string');\r",
									"    pm.expect(respData.user.email).to.be.a('string');\r",
									"    pm.expect(respData.user.title).to.be.a('string');\r",
									"    pm.expect(respData.user.birth_day).to.be.a('string');\r",
									"    pm.expect(respData.user.birth_month).to.be.a('string');\r",
									"    pm.expect(respData.user.birth_year).to.be.a('string');\r",
									"    pm.expect(respData.user.first_name).to.be.a('string');\r",
									"    pm.expect(respData.user.last_name).to.be.a('string');\r",
									"    pm.expect(respData.user.company).to.be.a('string');\r",
									"    pm.expect(respData.user.address1).to.be.a('string');\r",
									"    pm.expect(respData.user.address2).to.be.a('string');\r",
									"    pm.expect(respData.user.country).to.be.a('string');\r",
									"    pm.expect(respData.user.state).to.be.a('string');\r",
									"    pm.expect(respData.user.city).to.be.a('string');\r",
									"    pm.expect(respData.user.zipcode).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}getUserDetailByEmail?email=layla.smith@gmail.com",
							"host": [
								"{{base_url}}getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "layla.smith@gmail.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE METHOD To Delete User Account Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Response JSON has responseCode and it's 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode');\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "layla.smith@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}deleteAccount",
							"host": [
								"{{base_url}}deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}